---

- name: create application user(s) and group(s)
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
    - name: groupadd for g+rw perms on files
      group:
        name: "{{ item.group_name }}"
        state: present
      with_items: "{{ users_and_groups }}"

    - name: useradd
      user:
        name: "{{ item.user_name }}"
        generate_ssh_key: yes
        shell: /bin/bash
        createhome: yes
        home: "/home/{{ item.user_name }}"
        group: "{{ item.group_name }}"
        state: present
      with_items: "{{ users_and_groups }}"

    - name: add umask to /home/<user>/.profile for g+rw perms on files
      lineinfile:
          dest: "/home/{{ app_user.user_name }}/.profile"
          state: present
          regexp: '^umask 002$'
          insertafter: '# for ssh logins, install and configure the libpam-umask package.'
          line: 'umask 002'

#    - name: create the SSH public key file
#      copy: content="{{ git_ssh_public_key }}"
#            dest="/home/{{ app_user.user_name }}/.ssh/id_rsa.pub"
#            mode=0644
#      become: yes
#      become_user: "{{ app_user.user_name }}"
#
#    - name: create the SSH private key file
#      copy: content="{{ git_ssh_private_key }}"
#            dest="/home/{{ app_user.user_name }}/.ssh/id_rsa"
#            mode=0600
#      become: yes
#      become_user: "{{ app_user.user_name }}"

- name: install build-essential and build tools
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: install build-essential and build tools
    apt:
      name: build-essential,libtool,automake,binutils,git
      state: present

- name: install base python dependencies
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: install python dependencies
    apt:
      name: python-software-properties,python-dev,python-pycurl,python-pip,python-setuptools,python-virtualenv
      state: present

- name: Add GIS apt repository and install GDAL
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: setup GIS apt repository
    apt_repository:
      repo: 'ppa:ubuntugis/ubuntugis-unstable'
      state: present
      update_cache: yes

  - name: install PostGIS and GDAL dependencies
    apt:
      name: libgdal20,libgeos-c1v5,libgdal-dev,libgdal1-dev,liblwgeom-2.2-5,liblwgeom-dev
      state: present

  - name: install GDAL packages
    apt:
      name: gdal-bin,python-gdal
      state: present


- name: install postgresql, postgis and postgresql-common, contrib
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - postgres

- name: install rabbitmq
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - rabbitmq

- name: install nginx
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - nginx

- name: install Node.js packages
  hosts: all
  gather_facts: yes
  become: yes # sudo
  tasks:
  - name: install required apt-packages
    apt:
      name:  software-properties-common,apt-transport-https,lsb-release
      state: present
      install_recommends: no

  - name: Import the NodeSource GPG key into apt
    apt_key:
      url: https://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0x1655A0AB68576280
      id: "68576280"
      state: present

  - name: add-apt repository
    apt_repository: repo='deb https://deb.nodesource.com/node_{{ node_version }}.x {{ ansible_distribution_release }} main' state=present update_cache=yes

  - name: install nodejs
    apt:
     name: nodejs
     install_recommends: no

  - name: install 'npm'
    npm: name=npm version=3.3.12 global=yes

#  - name: install 'interp'
#    npm: name=interp global=yes
#
#  - name: install 'tl'
#    npm: name=tl global=yes
#    ignore_errors: yes
#
#  - name: install 'tilelive-http'
#    npm: name=tilelive-http global=yes
#
#  - name: install 'tilejson'
#    npm: name=tilejson global=yes


- name: install celery and celerybeat
  hosts: all
  gather_facts: no
  become: yes # sudo
  handlers:
  - name: restart celery
    become: yes
    service: name=celery state=restarted enabled=yes

  - name: restart celerybeat
    become: yes
    service: name=celerybeat state=restarted enabled=yes
  tasks:
  - name: install celery
    pip:
      name: celery
      state: present

  - name: install the 'celery' upstart script
    template:
      src: templates/osmexporttool/celery.upstart.conf.j2
      dest: /etc/init/celery.conf
      owner: root
      group: root
      mode: 0644
    notify: restart celery

    # the 'notify' callback does not run for some reason, force it for now
  - name: restart celery
    service: name=celery state=restarted enabled=yes

  - name: install the 'celerybeat' upstart script
    template:
      src: templates/osmexporttool/celerybeat.upstart.conf.j2
      dest: /etc/init/celerybeat.conf
      owner: root
      group: root
      mode: 0644
    notify: restart celerybeat

    # the 'notify' callback does not run for some reason, force it for now
  - name: restart celerybeat
    service: name=celerybeat state=restarted enabled=yes


- name: osm_export_tool project setup
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: create project home if it doesn't exist
    file:
      dest: "{{ project_home }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0774
#    become: yes
#    become_user: "{{ app_user.user_name }}"

#  - name: create empty 'hotosm' virtualenv in project home
#    pip:
#      virtualenv_command: /usr/bin/virtualenv
#      virtualenv: "{{ virtualenv_dir }}"
#      virtualenv_site_packages: yes # include site packages
#      name: ""
#    become: yes
#    become_user: "{{ app_user.user_name }}"

#  - name: .bashrc should activate virtual environment when we change to that user
#    lineinfile:
#      dest: "/home/{{ app_user.user_name }}/.bashrc"
#      regexp: "^source {{ virtualenv_dir }}/bin/activate; cd {{ project_home }}/{{ repo_name }};"
#      insertafter: "^# User specific aliases and functions"
#      line: "source {{ virtualenv_dir }}/bin/activate; cd {{ project_home }}/{{ repo_name }};"
#    become: yes
#    become_user: "{{ app_user.user_name }}"

  - name: create osm_export_tool DB
    postgresql_db:
      name: "{{ db_name }}"
      encoding: 'UTF-8'
      lc_collate: 'C.UTF-8'
      lc_ctype: 'C.UTF-8'
      template: 'template0'

  - name: add POSTGIS extension to the created db
    postgresql_ext:
      name: postgis
      db: "{{ db_name }}"

  - name: add HSTORE extension to the created db
    postgresql_ext:
      name: hstore
      db: "{{ db_name }}"

  - debug: msg="DB_PASSWORD = {{ db_password }}"
  - name: create osm_export_tool postgresql superuser/role
    postgresql_user:
      db: "{{ db_name }}"
      name: "{{ db_user }}"
      password: "{{ db_password }}"

#  - name: psql check schema 'exports'
#    command: psql -t -d "{{ db_name }}" -c "SELECT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'exports');"
#    register: check_schema
#    changed_when: "'f' in '{{ check_schema.stdout }}'"
#    become: yes
#    become_user: postgres
#  - debug: var=check_schema
#
#  - name: psql schema 'exports'
#    command: psql -d "{{ db_name }}" -c "CREATE SCHEMA exports AUTHORIZATION {{ db_user }}; ALTER USER {{ db_user }} SET search_path TO exports, public;"
#    when: check_schema.changed
#    become: yes
#    become_user: postgres

  - name: install thirdparty dependency packages
    apt:
      name: osmctools,spatialite-bin,libspatialite5,libspatialite-dev,default-jre,zip,unzip
      state: present

  - name: create the thirdparty directory
    file:
      dest: "{{ thirdparty_dir }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777

  - name: create the exdir(s) for zipfiles
    file:
      dest: "{{ item.exdir }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
    with_items: "{{ thirdparty_zipfiles }}"

    # drop to shell here because 'get_url' and 'unarchive' are slow
#  - name: download the thirdparty zips
#    local_action:
#    module: "shell wget -q {{ item.url }} -O {{ item.exdir }}"
#    with_items: "{{ thirdparty_zipfiles }}"
#    become: yes
#    become_user: "{{ app_user.user_name }}"

  - name: download the thirdparty zips
    get_url:
      url: "{{ item.url }}"
      dest: "{{ item.exdir }}/{{ item.url | basename }}"
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
      force: no # make sure it doesn't do a download if dest exists
    with_items: "{{ thirdparty_zipfiles }}"

  - name: unarchive the thirdparty zips
    unarchive:
      creates: "{{ item.exdir }}/exists.txt" # determines if this should run
      src: "{{ item.exdir }}/{{ item.url | basename }}"
      dest: "{{ item.exdir }}"
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
      copy: no
    with_items: "{{ thirdparty_zipfiles }}"

  - name: create export(s) dirs
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
    with_items:
      - "{{ exports_staging_dir }}"
      - "{{ exports_download_dir }}"
    become: yes
    become_user: "{{ app_user.user_name }}"


- name: osm_export_tool checkout and pip install
  hosts: all
  gather_facts: yes
  become: yes # sudo
  handlers:
    - name: restart nginx
      become: yes
      service: name=nginx state=restarted

    - name: restart gunicorn
      become: yes
      service: name=osm-export-tool2 state=restarted enabled=yes
      notify:
        - restart celery
        - restart celerybeat

    - name: restart celery
      become: yes
      service: name=celery state=restarted enabled=yes

    - name: restart celerybeat
      become: yes
      service: name=celerybeat state=restarted enabled=yes
  tasks:
    - name: apt get dependecies that aren't listed in osm-export-tool2 docs
      apt:
        name: libxml2-dev,libxml2,libxslt1-dev,libxslt1.1
        state: present

    - name: clone the osm-export-tool2 repository
      git:
        accept_hostkey: yes
        repo: "{{ git_repo_url }}"
        version: "{{ git_repo_branch }}"
        dest: "{{ project_root }}"
        clone: yes
        update: yes
        force: yes
      become: yes
      become_user: "{{ app_user.user_name }}"
      ignore_errors: yes

    - name: create project /static/ if it doesn't exist
      file:
        dest: "{{ project_static_dir }}"
        state: directory
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0774
      become: yes
      become_user: "{{ app_user.user_name }}"

#    - debug: msg="{{ lookup( 'env', 'C_INCLUDE_PATH' ) }}"
    - name: pip install the requirements
      pip:
#        virtualenv_command: /usr/bin/virtualenv
#        virtualenv: "{{ virtualenv_dir }}"
#        virtualenv_site_packages: yes
        requirements: "{{ requirements_file }}"
#      become: yes
#      become_user: "{{ app_user.user_name }}"

    - name: pip install 'gunicorn'
      pip: name=gunicorn

    - name: install the osm-export-tool2 'gunicorn' upstart script
      template:
        src: templates/osmexporttool/gunicorn.upstart.conf.j2
        dest: /etc/init/osm-export-tool2.conf
        owner: root
        group: root
        mode: 0644
      notify: restart gunicorn

      # the 'notify' callback does not run for some reason, force it for now
    - name: restart osm-export-tool2
      service: name=osm-export-tool2 state=restarted enabled=yes

    - name: deactivate the default 'nginx' site
      file: path=/etc/nginx/sites-enabled/default
            state=absent

    - name: install the osm-export-tool2 'nginx' into sites-available
      template:
        src: templates/osmexporttool/exports.nginx.j2
        dest: /etc/nginx/sites-available/exports
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: activate osm-export-tool2 'nginx' site
      file: src=/etc/nginx/sites-available/exports
            dest=/etc/nginx/sites-enabled/exports
            state=link
      notify: restart nginx

      # the 'notify' callback does not run for some reason, force it for now
    - name: restart 'nginx'
      service: name=nginx state=restarted enabled=yes

    - name: create settings file
      template:
        src: "templates/osmexporttool/site.settings.py.j2"
        dest: "{{ settings_dest }}"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0774
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: add DJANGO_SETTINGS_MODULE to .bashrc
      lineinfile:
        dest: "/home/{{ app_user.user_name }}/.bashrc"
        regexp: "^export DJANGO_SETTINGS_MODULE={{ django_settings_mod_path }};"
        insertafter: "^# User specific aliases and functions"
        line: "export DJANGO_SETTINGS_MODULE={{ django_settings_mod_path }};"
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: add STATIC_ROOT to .bashrc
      lineinfile:
        dest: "/home/{{ app_user.user_name }}/.bashrc"
        regexp: "^export STATIC_ROOT={{ project_static_dir }};"
        insertafter: "^export DJANGO_SETTINGS_MODULE={{ django_settings_mod_path }};"
        line: "export STATIC_ROOT={{ project_static_dir }};"
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: create garmin.conf.xml and overrite the current one
      template:
        src: "templates/osmexporttool/garmin_config.xml.j2"
        dest: "{{ garmin_xml_dest }}"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0774
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: run 'python manage.py migrate'
      django_manage:
        command: migrate
        app_path: "{{ project_root }}"
        settings: "{{ django_settings_mod_path }}"
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: run 'python manage.py collectstatic'
      django_manage:
        command: collectstatic
        app_path: "{{ project_root }}"
        settings: "{{ django_settings_mod_path }}"
      become: yes
      become_user: "{{ app_user.user_name }}"

#    - name: set postfix option hostname
#      debconf: name=postifx question="postfix/mailname" value="{{ansible_fqdn}}" vtype="string"
#
#    - name: set postfix option type as internet site
#      debconf: name=postfix question="postfix/main_mailer_type" value="'Internet Site'" vtype="string"

    - name: install postfix
      apt: package={{ item }} state=installed force=yes update_cache=yes cache_valid_time=3600
      with_items:
        - postfix

#    - name: install the postfix `main.cf` /etc/postfix
#      template:
#        src: templates/osmexporttool/postfix.main.cf.j2
#        dest: /etc/postfix/main.cf
#        owner: root
#        group: root
#        mode: 0644
#      notify: reload postfix
#
#      # the 'notify' callback does not run for some reason, force it for now
#    - name: restart postfix
#      service: name=postfix state=restarted enabled=yes
#
#    - name: reload postfix
#      service: name=postfix state=reloaded enabled=yes
